import { FirebaseApiClient } from '@xystemize/app-core';
import axios from 'axios';
import { Auth, getAuth, signInWithEmailAndPassword } from 'firebase/auth';

import { AppGlobalState } from '../app-global-state/AppGlobalState';
import { Name } from '../constant';
import {
  AccountDataModel,
  CustomClaimDataInterface,
  CustomClaimDataModel,
  SignUpDataInterface,
} from '../data-model';

import { ApiUrl } from './@ApiUrl';

class Api {
  auth?: Auth | null = null;

  async getOne(params: { id: string }) {
    return FirebaseApiClient.getOne({
      baseUrl: ApiUrl.accountsApiUrl,
      endpoint: params.id,
      params: params,
      classModel: AccountDataModel,
    });
  }

  async getCustomClaim(forceRefresh?: boolean) {
    if (!AppGlobalState.currentUser) {
      return null;
    }

    const { claims } = await AppGlobalState.currentUser.getIdTokenResult(forceRefresh);
    return new CustomClaimDataModel(claims as CustomClaimDataInterface);
  }

  async getAndForceRefreshCustomClaim() {
    return this.getCustomClaim(true);
  }

  async signup(params: SignUpDataInterface) {
    return FirebaseApiClient.postOne({
      baseUrl: ApiUrl.accountsApiUrl,
      endpoint: Name.signup,
      params: params,
      classModel: AccountDataModel,
    });
  }

  async signin({ auth, email, password }: { auth?: Auth | null; email: string; password: string }) {
    const firebaseAuth = auth ?? this.auth ?? getAuth();

    if (!firebaseAuth) {
      throw new Error(Name.NO_AUTH);
    }

    return FirebaseApiClient.handleFirebaseResponse(
      signInWithEmailAndPassword(firebaseAuth, email, password),
    );
  }

  async verify(link?: string) {
    if (!link) {
      return;
    }

    return axios.get(link);
  }
}

export const AccountsApi = new Api();
