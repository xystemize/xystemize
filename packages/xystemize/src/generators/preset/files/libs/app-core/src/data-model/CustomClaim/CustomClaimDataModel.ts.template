import {
  BooleanTransformer,
  DataTransactionType,
  IsNotBlank,
  IsValidUsernameChars,
  NumberWithDefaultTransformer,
  OptionalStringWithTrimTransformer,
  StringWithTrimAndLowerCaseTransformer,
  StringWithTrimTransformer,
} from '@xystemize/app-core';
import { AppBaseDataModel, ColorModeId } from '@xystemize/app-core';
import { Expose, Transform } from 'class-transformer';
import { IsNumber, MaxLength, MinLength } from 'class-validator';

import 'reflect-metadata';

import { AccountState, EntityTypeId, MediaTypeId, Name } from '../../constant';
import { ValidationRule } from '../../constant/ValidationRule';
import { MediaDataModel } from '../Media/MediaDataModel';

import { CustomClaimDataInterface } from './CustomClaimDataInterface';

export class CustomClaimDataModel extends AppBaseDataModel implements CustomClaimDataInterface {
  @IsNumber()
  @Transform(NumberWithDefaultTransformer({ default: AccountState.NotRegistered }))
  @Expose({ groups: [DataTransactionType.Create, DataTransactionType.Update ]})
  accountState: AccountState;

  @MaxLength(ValidationRule.UsernameMaxLength)
  @MinLength(ValidationRule.UsernameMinLength)
  @IsValidUsernameChars()
  @IsNotBlank()
  @Transform(StringWithTrimAndLowerCaseTransformer)
  @Expose({ groups: [DataTransactionType.Create, DataTransactionType.Update ]})
  username: string;

  @IsNumber()
  @Transform(NumberWithDefaultTransformer({ default: ColorModeId.DarkMode }))
  @Expose({ groups: [DataTransactionType.Create, DataTransactionType.Update ]})
  colorModeId: ColorModeId;

  @Transform(OptionalStringWithTrimTransformer)
  @Expose({ groups: [DataTransactionType.Create, DataTransactionType.Update ]})
  mediaUrlTokenSmall: string | null;

  @Transform(OptionalStringWithTrimTransformer)
  @Expose({ groups: [DataTransactionType.Create, DataTransactionType.Update ]})
  mediaFileExtension: string | null;

  @Transform(OptionalStringWithTrimTransformer)
  @Expose({ groups: [DataTransactionType.Create, DataTransactionType.Update ]})
  mediaUrlTokenOriginal: string | null;

  // toClassOnly\
  @Transform(StringWithTrimTransformer)
  @Expose({ toClassOnly: true, name: Name.user_id })
  userId: string;

  @IsNotBlank()
  @Transform(StringWithTrimTransformer)
  @Expose({ toClassOnly: true })
  sub: string;

  @IsNotBlank()
  @Transform(StringWithTrimTransformer)
  @Expose({ toClassOnly: true })
  email: string;

  @Transform(BooleanTransformer)
  @Expose({ toClassOnly: true, name: Name.email_verified })
  emailVerified: boolean;

  constructor(obj?: CustomClaimDataInterface) {
    super();
    this.transformAndAssign(CustomClaimDataModel, obj);
  }

  get accountId() {
    return this.userId ?? this.sub;
  }

  get isNotRegistered() {
    return this.accountState === AccountState.NotRegistered;
  }

  get isRegistered() {
    return this.accountState === AccountState.Registered;
  }

  getMediaUrl = ({ bucket }: { bucket?: string | null }) => {
    if (!bucket) {
      return null;
    }

    if (!this.mediaUrlTokenOriginal && !this.mediaUrlTokenSmall) {
      return null;
    }

    const media = new MediaDataModel({
      id: this.accountId,
      accountId: this.accountId,
      entityId: this.accountId,
      entityTypeId: EntityTypeId.Account,
      mediaTypeId: MediaTypeId.Image,
      fileExtension: this.mediaFileExtension,
      mediaUrlTokenSmall: this.mediaUrlTokenSmall,
      mediaUrlTokenOriginal: this.mediaUrlTokenOriginal,
      bucket: bucket,
    });

    return media.mediaUrlSmall || media.mediaUrlOriginal;
  };
}
