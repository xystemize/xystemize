import { BadRequestException, ConflictException, Injectable, NotFoundException } from '@nestjs/common';
import {
  AccountDataModel,
  MediaDataModel,
  Name,
  SignUpDataModel,
} from '<%= orgName %>/app-core';
import { FirebaseAuthService, FirestoreService } from '<%= orgName %>/backend-lib';
import { isEmpty } from 'lodash';
import { autoInjectable } from 'tsyringe';

@autoInjectable()
@Injectable()
export class AccountsService {
  constructor(
    private readonly firestoreService: FirestoreService,
    private readonly firebaseAuthService: FirebaseAuthService
  ) {}

  async getOneById({ id: accountId }: { id: string; requesterAccountId: string }) {
    if (isEmpty(accountId)) {
      throw new BadRequestException();
    }

    const [{ data: account }, { data: media }] = await Promise.all([
      this.firestoreService.getOneById({
        id: accountId,
        collectionName: Name.accounts,
        classModel: AccountDataModel,
      }),
      this.firestoreService.getOneById({
        id: accountId,
        collectionName: Name.mediaItems,
        classModel: MediaDataModel,
      }),
    ]);

    if (!account) {
      throw new NotFoundException();
    }

    if (account) {
      account.media = media;
    }

    return account;
  }

  async signup(body: SignUpDataModel) {
    const { data } = await this.firestoreService.getOneByProperty({
      value: body.email.toLowerCase(),
      property: Name.email,
      classModel: AccountDataModel,
      collectionName: Name.accounts,
    });

    if (data) {
      throw new ConflictException();
    }

    const response = await this.firebaseAuthService.signUp(body);
    const account = new AccountDataModel(body);
    account.id = response?.uid || '';

    await this.firestoreService.runTransaction(async (transaction) => {
      const media = account.media;
      const accountDocRef = this.firestoreService.accounts.doc(account.id);

      transaction.create(accountDocRef, account.toFirestoreDocument());

      if (media?.isValid) {
        const mediaDocRef = this.firestoreService.mediaItems.doc(media.id);
        transaction.create(mediaDocRef, media.toFirestoreDocument());
      }
    });

    return account;
  }
}
