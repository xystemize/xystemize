import { AccountsApi } from '<%= orgName %>/app-core';
import { FirebaseApiClient } from '@xystemize/app-core';
import { resetAllDatabases } from '@xystemize/backend';

import { TestApi as api } from '../@test/TestApi';

describe('Accounts', () => {
  beforeAll(async () => {
    await Promise.all([api.initialize(), resetAllDatabases()]);
  });

  describe('GET /accounts/:id', () => {
    test('Error 403: Forbidden', async () => {
      const [unverifiedAccount, verifiedAccount] = await Promise.all([
        api.createUnverifiedAccount(),
        api.createVerifiedAccountAndSignUserIn(),
      ]);

      FirebaseApiClient.currentUser = null;

      let res = await AccountsApi.getOne({ id: verifiedAccount.account?.id ?? '' });
      expect(res.statusCode).toBe(403);

      FirebaseApiClient.currentUser = unverifiedAccount.userCredential?.user;
      res = await AccountsApi.getOne({ id: verifiedAccount.account?.id ?? '' });
      expect(res.statusCode).toBe(403);
    });

    test('Error 404: Not found', async () => {
      const verifiedAccount = await api.createVerifiedAccountAndSignUserIn();
      FirebaseApiClient.currentUser = verifiedAccount.userCredential?.user;

      let res = await AccountsApi.getOne({ id: 'd' });
      expect(res.statusCode).toBe(404);

      res = await AccountsApi.getOne({ id: 'invalidId' });
      expect(res.statusCode).toBe(404);
    });

    test('Success 200', async () => {
      const verifiedAccount = await api.createVerifiedAccountAndSignUserIn();
      FirebaseApiClient.currentUser = verifiedAccount.userCredential?.user;

      const res = await AccountsApi.getOne({ id: verifiedAccount.account?.id ?? '' });
      expect(res.statusCode).toBe(200);
    });
  });
});
